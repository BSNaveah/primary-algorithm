public class Code05_BSNearLeft {

    //在arr上，找满足>=value的最左位置    O(logn)
    public static int nearestIndex(int[] arr,int value){
        int L=0;
        int R=arr.length-1;
        int index = -1;//记录最左边的对号
        while(L<=R){
            int mid=L+((R-L)>>1);
            //发现右侧有大于目标值的，抛弃右边，右边下标R=mid-1
            if(arr[mid]>=value){
                index=mid;
                R=mid-1;
            }else {
                L=mid+1;
            }
        }
        return index;
    }

    //用来作对比测试的  暴力循环对比方法   O(n)
    public static int test(int[] arr,int value){
        for(int i=0;i<arr.length;i++){
            if(arr[i]>=value){
                return i;
            }
        }
        return -1;
    }

    //生成一个随机数数组
    public static int[] generateRandomArray(int maxSize,int maxValue){
        //Math.random()   [0,1]随机数
        //N*Math.random()  [0,N]随机数
        int [] arr=new int[(int) ((maxSize+1)*Math.random())];
        for(int i=0;i<arr.length;i++){
            //为了得到[-N,N] 有负数
            arr[i]= (int) ((maxSize+1)*Math.random())-(int) (maxValue*Math.random());
        }
        return arr;
    }

    //打印出数组
    public static void printArray(int[] arr){
        if (arr==null){
            return;
        }
        for (int i=0;i<arr.length;i++){
            System.out.print(arr[i]+" ");
        }
        System.out.println();
    }

    //主方法进行测试
    public static void main(String[] args) {
        int testTime=500000;
        int maxSize=100;
        int maxValue=100;
        boolean succeed=true; //完成与否标记
        for(int i=0;i<testTime;i++){
            //1 生成自定义大小的随机数组
            int [] arr=generateRandomArray(maxSize,maxValue);
            //2 利用系统的Sort方法排序成标准的有序数组
            Arrays.sort(arr);
            //3 生成一个随机数，进行测试
            int value=(int)((maxSize+1)*Math.random())-(int)(maxValue*Math.random());
            if (test(arr,value)!=nearestIndex(arr,value)){
                printArray(arr);
                System.out.println("目标值： "+value);
                System.out.println("暴力完的下标： "+test(arr,value));
                System.out.println("二分法的下标： "+nearestIndex(arr,value));
                succeed=false;
                break;
            }
        }
        System.out.println(succeed?"Nice!漂亮！":"Fucking fucked!继续努力！");
    }
}
